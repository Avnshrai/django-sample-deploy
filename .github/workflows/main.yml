name: Django CI/CD Workflow
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  pre-setup-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache dependency
        uses: actions/cache@v2 
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.x' 
      - name: Check Python version 
        run: python --version
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: ${{ secrets.AWS_REGION }}
           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
           KUBE_NAMESPACE: argocd
           EKS_CLUSTER: ArgoCD
      - name: Build Docker Image
        run: docker build -t kubernetes-django .
      # - name: Install Helm # helm installation in our runner for deploying.
      #   run: |
      #     curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
      #     chmod 700 get_helm.sh
      #     ./get_helm.sh
      # - name: Check AWS version
      #   run: |
      #     aws --version
      #     aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      #     aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      #     aws configure set region $EKS_REGION
      #     aws sts get-caller-identity
      - name: Connect to EKS cluster 
        run: aws eks update-kubeconfig --name ArgoCD
        # run: aws eks --region $EKS_REGION update-kubeconfig --name $EKS_CLUSTER
      - name: setup argocli
        run: |
             curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v2.12.13/argo-linux-amd64.gz
             ls -la
             sleep 2m
             sudo apt install gzip
             sudo gzip argo-linux-amd64.gz
             sudo chmod +x argo-linux-amd64
             sudo mv ./argo-linux-amd64 /usr/local/bin/argo
             argo version --short
      - name: sign in into ARGOCD
        run: sudo argocd login $(kubectl get service argocd-server -n argocd --output=jsonpath='{.status.loadBalancer.ingress[0].hostname}') --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) --insecure
      - name: create a apps
        run: sudo argocd app create django --repo https://github.com/Avnshrai/django-sample-deploy.git --path ./ --dest-server https://kubernetes.default.svc --dest-namespace django
      - name: Deploy on argocd
        run: sudo kubectl apply -f argo.yaml
      
      